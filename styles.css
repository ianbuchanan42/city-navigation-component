/* Base styles for the demo page */
body {
  font-family: -apple-system, BlinkMacSystemFont, 'SF Pro Text',
    'Helvetica Neue', Helvetica, Arial, sans-serif;
  background-color: white;
  padding: 2rem;
  margin: 0;
}

/* Section spacing for demo layout */
section {
  margin-bottom: 10rem;
}

/* Section headings */
h2 {
  font-size: 1.5rem;
  font-weight: 600;
  margin-bottom: 1rem;
  text-align: center;
  color: #8e8e93;
}

.loading-test {
  display: block;
  text-align: center;
}

/* Main component container */
.city-navigation-component {
  font-family: -apple-system, BlinkMacSystemFont, 'SF Pro Text',
    'Helvetica Neue', Helvetica, Arial, sans-serif;
  background-color: white;
  padding: 2rem 1rem;
  margin: 2rem auto;
  /* Improves text rendering on WebKit browsers for crisper, more readable text */
  -webkit-font-smoothing: antialiased;
}

/* Navigation container */
.city-navigation-component .city-nav {
  position: relative;
  padding: 1rem;
}

/* Navigation items container */
.city-navigation-component .nav-items {
  display: flex;
  gap: 2rem;
  position: relative;
  margin-bottom: 0.5rem;
  justify-content: space-around;
  padding: 0 2rem;
}

/* Individual navigation items */
.city-navigation-component .nav-item {
  cursor: pointer;
  padding: 0.5rem 0;
  color: #8e8e93;
  /* Smooth color change when hovering */
  transition: color 0.3s ease;
  position: relative;
  font-size: 1rem;
  font-weight: 400;
  outline: none;
}

/* Hover state for navigation items */
.city-navigation-component .nav-item:hover {
  color: #007aff;
}

/* Active state for navigation items */
.city-navigation-component .nav-item.active {
  color: #000000;
  cursor: default;
}

/* Focus state for accessibility */
.city-navigation-component .nav-item:focus-visible {
  outline: 2px solid #007aff;
  outline-offset: 4px;
  border-radius: 4px;
}

/* Sliding bar container */
.city-navigation-component .nav-bar-container {
  position: relative;
  width: 100%;
  height: 1.5px;
  display: flex;
  justify-content: center;
}

/* Background line for the sliding bar */
.city-navigation-component .nav-bar-background {
  position: absolute;
  bottom: 0;
  left: 0;
  width: 100%;
  height: 1.5px;
  background-color: #8e8e93;
  opacity: 0.5;
}

/* Animated sliding bar */
.city-navigation-component .sliding-bar {
  position: absolute;
  bottom: 0;
  left: 0;
  height: 1.5px;
  background-color: #000000;
  pointer-events: none;
  z-index: 1;
}

/* Transition for sliding bar animation */
.city-navigation-component .sliding-bar.transition {
  transition: all 0.4s ease;
}

/* Reset button styles */
.city-navigation-component button {
  -webkit-appearance: none;
  appearance: none;
  border: none;
  background: none;
  padding: 0;
  margin: 0;
  /* Inherits font, color, and cursor from parent element */
  font: inherit;
  color: inherit;
  cursor: pointer;
}

/* Error message styling */
.city-navigation-component .error-message {
  color: #ff3b30;
  font-size: 1rem;
  padding: 1rem;
  text-align: center;
  background-color: rgba(255, 59, 48, 0.1);
  border-radius: 8px;
  margin: 1rem 0;
}

/* Error message paragraph */
.city-navigation-component .error-message p {
  margin: 0;
  line-height: 1.4;
}

/* Time display styling for city navigation
   Uses absolute positioning with transform for smooth animations
   and better performance than top/left positioning */
.city-navigation-component .time-display {
  /* Position above the button with some spacing
     position: absolute takes the element out of the normal document flow
     and positions it relative to its nearest positioned ancestor (the button)
     
     bottom: calc(100% + 5px) means:
     - 100% refers to the full height of the parent button
     - + 5px adds 5 pixels of spacing above the button
     - calc() allows us to combine these values
     This creates a consistent gap between the time display and the button,
     regardless of the button's height */
  position: absolute;
  bottom: calc(100% + 5px);

  /* Center horizontally using transform
     translateX(-50%) moves the element left by half its width
     This is a common technique for centering absolutely positioned elements
     The -50% is needed because the transform is based on the element's width */
  left: 50%;
  transform: translateX(-50%) translateY(0);

  /* Typography styling for readability */
  font-size: 0.875rem;
  font-weight: 400;
  color: #8e8e93;

  /* Prevent layout shifts by maintaining consistent height */
  min-height: 1.5rem;

  /* Initial hidden state with opacity and visibility
     Using both properties ensures proper hiding across browsers */
  opacity: 0;
  visibility: hidden;

  /* Smooth transition for all properties
     Using cubic-bezier for a natural easing curve */
  transition: opacity 0.3s cubic-bezier(0.4, 0, 0.2, 1),
    visibility 0.3s cubic-bezier(0.4, 0, 0.2, 1),
    transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);

  /* Prevent interaction with the time display
     Ensures it doesn't interfere with button clicks */
  pointer-events: none;

  /* Ensure text stays on one line and is centered */
  text-align: center;
  white-space: nowrap;
}

/* Visible state - fully opaque and visible
   Transform ensures the element is centered and in position
   translateX(-50%) keeps it centered horizontally
   translateY(0) keeps it at its natural vertical position */
.city-navigation-component .time-display.visible {
  opacity: 1;
  visibility: visible;
  transform: translateX(-50%) translateY(0);
}

/* Hidden state - slides down slightly while fading out
   Creates a subtle but polished exit animation
   translateY(10px) moves the element down by 10 pixels while hiding
   This creates a smooth "slide down and fade" effect */
.city-navigation-component .time-display.hidden {
  opacity: 0;
  visibility: hidden;
  transform: translateX(-50%) translateY(10px);
}
